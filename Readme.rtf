{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf110
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red118\green15\blue80;\red137\green19\blue21;\red0\green0\blue255;
}
\margl1440\margr1440\vieww12000\viewh11400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\b\fs48 \cf0 BNRPersistence\

\b0\fs28 Aaron Hillegass\
aaron@bignerdranch.com\
Jan 25, 2009\
\
After a few years of whining that Core Data has all of the shortcomings of the Enterprise Objects Framework with none of the advantages of archiving, I thought I should write a persistence framework that points in what I think is the right direction.  And this is it.\
\
One big difference? Objects can have ordered relationships.  For example, a playlist of songs is an ordered collection.  This is awkward to do in Core Data because it uses a relational database.\
\
Another big difference? It doesn't use SQLite, but rather a key-value store called Tokyo Cabinet.\
\
BNRPersistence is not really a framework at the moment,  just a set of classes that you can include in your project.\
\

\b\fs36 Install:\

\b0\fs28 \
First, you need to download Tokyo Cabinet:\
	http://1978th.net/tokyocabinet/\
(There is a sourceforge page, but the latest build seems to be on this site.)\
\
In Terminal.app, untar the tarball and cd into the resulting directory.\
\
(You want 64-bit library? In Terminal, set an environment variable for 64-bit builds:\
\

\f1 export CFLAGS='-arch x86_64'\

\f0 \
)\
\
Configure, build, and install:\

\f1 ./configure\
make\
sudo make install\

\f0 \
Now, you have a 
\f1\fs26 /usr/local/lib//usr/local/lib/libtokyocabinet.a
\f0\fs28  that needs to linked into any project that uses these classes. (I usually use the "Add->Existing Frameworks" menu item to do this.)\
\
You'll also need to have 
\f1\fs26 /usr/local/include/
\f0\fs28  among your header search path. (See the Xcode target's build info to add this.)\
\
Now just add the classes in the BNRPersistence directory into your project.  (If you copy them, you won't get the new version when you update your git repository.  This may be exactly what you want, but these are pretty immature, so I would suggest that you link to them instead.)\
\

\b\fs36 Using it:\

\b0\fs28 \
You've used Core Data?  The 
\b BNRStore
\b0  is analogous to 
\b NSManagedObjectContext
\b0 .  
\b BNRStoredObject
\b0  is analogous to 
\b NSManagedObject
\b0 .  There is no model, instead, like archiving, you must have two methods in you BNRStoredObject subclass.  Here are the methods from a Playlist class:\
\
\pard\tx864\pardeftab864\ql\qnatural\pardirnatural

\f1\fs26 \cf0 \CocoaLigature0 - (\cf2 void\cf0 )readContentFromBuffer:(BNRDataBuffer *)d\
\{\
    [title release];\
    title = [[d readString] retain];\
    \
    [songs release];\
    songs = [d readArrayOfClass:[Song class]\
                     usingStore:[\cf2 self\cf0  store]];\
    [songs retain];\
\}\
\
- (\cf2 void\cf0 )writeContentToBuffer:(BNRDataBuffer *)d\
\{\
    [d writeString:title];\
    [d writeArray:songs ofClass:[Song class]];\
\}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\fs28 \cf0 \CocoaLigature1 \
So, 
\b BNRDataBuffers
\b0  are like 
\b NSData
\b0 , but they have methods for reading and writing different types of data.\
\
(I certainly debate the idea of a model file that would replace these methods, but for now this is fast and simple.  If you would rather have a model file than implement these methods, you are invited to write a BNRPersistenceModelEditor.)\
\
All the instances of class will be stored in a single TokyoCabinet file, thus you will be saving to a directory containing one file for each class that you are storing.\
\
To create a store, first you must create a backend.  I have tried BerkeleyDB and GDBM, but I am quite enamored with Tokyo Cabinet right now.  (If you would like to try the other backends, write me and I'll send you the necessary classes.)\
\
\pard\tx864\pardeftab864\ql\qnatural\pardirnatural

\f1\fs26 \cf0 \CocoaLigature0     NSError *error;\
    NSString *path = \cf3 @"/tmp/complextest/"\cf0 ;\
    BNRTCBackend *backend = [[BNRTCBackend alloc] initWithPath:path\
                                                         error:&error];\
    \cf2 if\cf0  (!backend) \{\
        NSLog(\cf3 @"Unable to create database at %@"\cf0 , path);\
        \'85display error here\'85 \
    \}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\fs28 \cf0 \CocoaLigature1 \
Now that you have a backend, you can create a store and tell it which classes you are going to be saving or loading.  This is a little lame, I realize, but you also need to make a guess at how many instances you'll be dealing with.  The uniquing table has a hash table for each class, and you get better performance if is bigger, but you get a smaller memory footprint if it is smaller.  It will grow as necessary, but a good guess here is helpful as growing is relatively expensive:\
\
\pard\tx864\pardeftab864\ql\qnatural\pardirnatural

\f1\fs26 \cf0 \CocoaLigature0     BNRStore *store = [[BNRStore alloc] init];\
    [store setBackend:backend];\
    [backend release];\
    \
    [store addClass:[Song class] expectedCount:123456];\
    [store addClass:[Playlist class] expectedCount:23456];\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\fs28 \cf0 \CocoaLigature1 \
(One day I will make the hash table smarter.)\
\
Now to get a list of of the songs in the store:\
\
\pard\tx864\pardeftab864\ql\qnatural\pardirnatural

\f1\fs26 \cf0 \CocoaLigature0     NSArray *allPlaylists = [store allObjectsForClass:[Playlist class]];\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\fs28 \cf0 \CocoaLigature1 \
To insert a new playlist:\
\
\pard\tx864\pardeftab864\ql\qnatural\pardirnatural

\f1\fs26 \cf0 \CocoaLigature0       Playlist *playlist = [[Playlist alloc] init];\
      [store insertObject:playlist];\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\fs28 \cf0 \CocoaLigature1 \
To delete a playlist:\
\
\pard\tx864\pardeftab864\ql\qnatural\pardirnatural

\f1\fs26 \cf0 \CocoaLigature0       [store deleteObject:playlist];\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\fs28 \cf0 \CocoaLigature1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural
\cf0 To update a playlist:\
\
\pard\tx864\pardeftab864\ql\qnatural\pardirnatural

\f1\fs26 \cf0 \CocoaLigature0       [store willUpdateObject:playlist];\
      [playlist setTitle:@"CarMusic"];\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\fs28 \cf0 \CocoaLigature1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural
\cf0 (Yes, this is a place where a model file would make the framework cooler: I could become an observer of this object and get notified when the value changed.  This works OK.\
\
(As a side-note, there is some experimental support for automatically updating the undo managed.  Just give the store an undo manager.)\
\
To save all the changes:\
\
\pard\tx864\pardeftab864\ql\qnatural\pardirnatural

\f1\fs26 \cf0 \CocoaLigature0     \cf2 BOOL\cf0  success = [store saveChanges:&error];\
    \cf2 if\cf0  (!success) \{\
        NSLog(\cf3 @"error = %@"\cf0 , [error localizedDescription]);\
        \cf2 return\cf0  -\cf4 1\cf0 ;\
    \}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\fs28 \cf0 \CocoaLigature1 \
Strange stuff I've done.  Each class in a store can have a version.  This is kept in the 
\b BNRClassMetaData
\b0  object for the class.  You can reach this in your 
\f1 readContentFromBuffer
\f0  method (because you have access to the store).\
\
In your BNRStoredObject class, you can implement these two methods if you wish:\
\pard\tx864\pardeftab864\ql\qnatural\pardirnatural

\f1\fs26 \cf0 \CocoaLigature0 - (\cf2 void\cf0 )prepareForDelete;\
- (\cf2 void\cf0 )dissolveAllRelationships;
\fs36 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\fs28 \cf0 \CocoaLigature1 \

\f1 prepareForDelete
\f0  is where you implement your delete rule: When a song is deleted, for example, it needs to remove itself from any playlists it is in.\
\

\f1 dissolveAllRelationships
\f0  is a fix for a common problem.  You close the document, but the objects in the document have retain cycles so they don't get deallocated properly.  In dissolveAllRelationships,  your stored objects (the ones in memory) are being asked to release any other stored objects they are retaining.\
\
In the directory, you will find TCSpeedTest and CDSpeedTest. These are command-line tools that compare the speed of some tasks in BNRPersistence (TCSpeedTest) and Core Data (CDSpeedTest)\
\
Your mileage may vary,  but I see:\
\
Creating 1,000 playlists, 100,000 songs, and 100 songs in each playlist and saving (ComplexInsertTest):\
BNRPersistence is 10 times faster than CoreData\
\
Reading in the playlist and getting the title of the first song in each playlist (ComplexFetchTest):\
BNRPersistence is 13 times faster than CoreData\
\
Creating 1,000,000 songs and inserting them and saving (SimpleInsertTest):\
BNRPersistence is 17 times faster than CoreData\
\
Fetching in 1,000,000 songs (SimpleFetchTest)\
CoreData is 2 times faster than BNRPersistence\
(BNRPersistence is single-threaded and CoreData has some clever multi-threading in this case.  I think I can do similar tricks in BNRPersistence and catch up in this case.  In either case, it is very, very fast.  On my machine, fetching a million songs takes 6.2 seconds the first time and 3.9 seconds the second time.)\
\

\b\fs36 To Do:\

\b0\fs28 \
I recognize that there is room for improvement here:\
\
1) The creation of a model-file architecture and editor\
2) Add Tokyo Distopia to make full-text search fast\
3) Use B+ trees to make attributes indexable\
4) Better automatic undo support \
5) Automatic syncing to a webservice\
6) Easy hooks for QuickLook images and Spotlight metadata in 
\b BNRStoreDocument
\b0 \
\
}