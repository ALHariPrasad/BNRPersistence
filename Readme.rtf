{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf250
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red118\green15\blue80;\red137\green19\blue21;\red0\green0\blue255;
}
\margl1440\margr1440\vieww20300\viewh11640\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\b\fs48 \cf0 BNRPersistence\

\b0\fs28 Aaron Hillegass\
aaron@bignerdranch.com\
March 29, 2010\
\
After a few years of whining that Core Data could have been better, I thought I should write a persistence framework that points in what I think is the right direction.  And this is it.\
\
One big difference? Objects can have ordered relationships.  For example, a playlist of songs is an ordered collection.  This is awkward to do in Core Data because it uses a relational database.\
\
Another big difference? It doesn't use SQLite, but rather a key-value store called Tokyo Cabinet.\
\
BNRPersistence is not really a framework at the moment,  just a set of classes that you can include in your project.\
\

\b\fs36 Install:\

\b0\fs28 \
First, you need to download Tokyo Cabinet:\
	http://1978th.net/tokyocabinet/\
(There is a sourceforge page, but the latest build seems to be on this site.)\
\
In Terminal.app, untar the tarball and cd into the resulting directory.\
\
(You want 64-bit library? In Terminal, set an environment variable for 64-bit builds:\
\

\f1 export CFLAGS='-arch x86_64'\

\f0 \
)\
\
Configure, build, and install:\

\f1 ./configure\
make\
sudo make install\

\f0 \
Now, you have a 
\f1\fs26 /usr/local/lib//usr/local/lib/libtokyocabinet.a
\f0\fs28  that needs to linked into any project that uses these classes. (I usually use the "Add->Existing Frameworks" menu item to do this.)\
\
You'll also need to have 
\f1\fs26 /usr/local/include/
\f0\fs28  among your header search path. (See the Xcode target's build info to add this.)\
\
(If you want full-text searching, you will also need to install Tokyo Distopia.)\
\
Now just add the classes in the BNRPersistence directory into your project.  (If you copy them, you won't get the new version when you update your git repository.  This may be exactly what you want, but these are pretty immature, so I would suggest that you link to them instead.)\
\
If you have not linked in Tokyo Distopia, leave out BNRTCIndexManager or you will get linker errors.\
\

\b\fs36 Using it:\

\b0\fs28 \
You've used Core Data?  The 
\b BNRStore
\b0  is analogous to 
\b NSManagedObjectContext
\b0 .  
\b BNRStoredObject
\b0  is analogous to 
\b NSManagedObject
\b0 .  There is no model, instead, like archiving, you must have two methods in you BNRStoredObject subclass.  Here are the methods from a Playlist class:\
\
\pard\tx864\pardeftab864\ql\qnatural\pardirnatural

\f1\fs26 \cf0 \CocoaLigature0 - (\cf2 void\cf0 )readContentFromBuffer:(BNRDataBuffer *)d\
\{\
    [title release];\
    title = [[d readString] retain];\
    \
    [songs release];\
    songs = [d readArrayOfClass:[Song class]\
                     usingStore:[\cf2 self\cf0  store]];\
    [songs retain];\
\}\
\
- (\cf2 void\cf0 )writeContentToBuffer:(BNRDataBuffer *)d\
\{\
    [d writeString:title];\
    [d writeArray:songs ofClass:[Song class]];\
\}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\fs28 \cf0 \CocoaLigature1 \
So, 
\b BNRDataBuffers
\b0  are like 
\b NSData
\b0 , but they have methods for reading and writing different types of data. (It does byte-swapping so you can move the data files from PPC to Intel without a problem.)\
\
(I certainly debate the idea of a model file that would replace these methods, but for now this is fast and simple.  If you would rather have a model file than implement these methods, you are invited to write a BNRPersistenceModelEditor.)\
\
All the instances of class will be stored in a single TokyoCabinet file, thus you will be saving to a directory containing one file for each class that you are storing.\
\
To create a store, first you must create a backend.  I have tried BerkeleyDB and GDBM, but I am quite enamored with Tokyo Cabinet right now.  (If you would like to try the other backends, write me and I'll send you the necessary classes.)\
\
\pard\tx864\pardeftab864\ql\qnatural\pardirnatural

\f1\fs26 \cf0 \CocoaLigature0     NSError *error;\
    NSString *path = \cf3 @"/tmp/complextest/"\cf0 ;\
    BNRTCBackend *backend = [[BNRTCBackend alloc] initWithPath:path\
                                                         error:&error];\
    \cf2 if\cf0  (!backend) \{\
        NSLog(\cf3 @"Unable to create database at %@"\cf0 , path);\
        \'85display error here\'85 \
    \}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\fs28 \cf0 \CocoaLigature1 \
Now that you have a backend, you can create a store and tell it which classes you are going to be saving or loading:\
\
\pard\tx864\pardeftab864\ql\qnatural\pardirnatural

\f1\fs26 \cf0 \CocoaLigature0     BNRStore *store = [[BNRStore alloc] init];\
    [store setBackend:backend];\
    [backend release];\
    \
    [store addClass:[Song class]];\
    [store addClass:[Playlist class]];\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\fs28 \cf0 \CocoaLigature1 \
(You must add the classes in the same order every time.  The classID of a class (see 
\b BNRClassMetaData
\b0 ) is determined by the order)\
\
Now to get a list of of the playlists in the store:\
\
\pard\tx864\pardeftab864\ql\qnatural\pardirnatural

\f1\fs26 \cf0 \CocoaLigature0     NSArray *allPlaylists = [store allObjectsForClass:[Playlist class]];\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\fs28 \cf0 \CocoaLigature1 \
To insert a new playlist:\
\
\pard\tx864\pardeftab864\ql\qnatural\pardirnatural

\f1\fs26 \cf0 \CocoaLigature0       Playlist *playlist = [[Playlist alloc] init];\
      [store insertObject:playlist];\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\fs28 \cf0 \CocoaLigature1 \
To delete a playlist:\
\
\pard\tx864\pardeftab864\ql\qnatural\pardirnatural

\f1\fs26 \cf0 \CocoaLigature0       [store deleteObject:playlist];\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\fs28 \cf0 \CocoaLigature1 \
To update a playlist:\
\
\pard\tx864\pardeftab864\ql\qnatural\pardirnatural

\f1\fs26 \cf0 \CocoaLigature0       [store willUpdateObject:playlist];\
      [playlist setTitle:@"CarMusic"];\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\fs28 \cf0 \CocoaLigature1 \
(Yes, this is a place where a model file would make the framework cooler: I could become an observer of this object and get notified when the value changed.)\
\
(As a side-note, there is some experimental support for automatically updating the undo managed.  Just give the store an undo manager.  This also could be made better with a model file.)\
\
To save all the changes:\
\
\pard\tx864\pardeftab864\ql\qnatural\pardirnatural

\f1\fs26 \cf0 \CocoaLigature0     \cf2 BOOL\cf0  success = [store saveChanges:&error];\
    \cf2 if\cf0  (!success) \{\
        NSLog(\cf3 @"error = %@"\cf0 , [error localizedDescription]);\
        \cf2 return\cf0  -\cf4 1\cf0 ;\
    \}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\fs28 \cf0 \CocoaLigature1 \
Each class in a store can have a version.  This is kept in the 
\b BNRClassMetaData
\b0  object for the class.  You can reach this in your 
\f1 readContentFromBuffer
\f0  method (because you have access to the store).\
\
In your BNRStoredObject class, you can implement these two methods if you wish:\
\pard\tx864\pardeftab864\ql\qnatural\pardirnatural

\f1\fs26 \cf0 \CocoaLigature0 - (\cf2 void\cf0 )prepareForDelete;\
- (\cf2 void\cf0 )dissolveAllRelationships;
\fs36 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\fs28 \cf0 \CocoaLigature1 \

\f1 prepareForDelete
\f0  is where you implement your delete rule: When a song is deleted, for example, it needs to remove itself from any playlists it is in.\
\

\f1 dissolveAllRelationships
\f0  is a fix for a common problem.  You close the document, but the objects in the document have retain cycles so they don't get deallocated properly.  In dissolveAllRelationships,  your stored objects (the ones in memory) are being asked to release any other stored objects they are retaining.\
\
In the directory, you will find TCSpeedTest and CDSpeedTest. These are command-line tools that compare the speed of some tasks in BNRPersistence (TCSpeedTest) and Core Data (CDSpeedTest)\
\
Your mileage may vary,  but I see:\
\
Creating 1,000 playlists, 100,000 songs, and 100 songs in each playlist and saving (ComplexInsertTest):\
BNRPersistence is 10 times faster than CoreData\
\
Reading in the playlist and getting the title of the first song in each playlist (ComplexFetchTest):\
BNRPersistence is 13 times faster than CoreData\
\
Creating 1,000,000 songs and inserting them and saving (SimpleInsertTest):\
BNRPersistence is 17 times faster than CoreData\
\
Fetching in 1,000,000 songs (SimpleFetchTest)\
CoreData is 2 times faster than BNRPersistence\
(BNRPersistence is single-threaded and CoreData has some clever multi-threading in this case.  I think I can do similar tricks in BNRPersistence and catch up in this case.  In either case, it is very, very fast.  On my machine, fetching a million songs takes 6.2 seconds the first time and 3.9 seconds the second time.)\
\

\b\fs36 Full-text search\
\

\b0\fs28 To do full-text search, you need to give the 
\b BNRStore
\b0  an instance of 
\b BNRTCIndexManager
\b0 .  I usually have it put the index in the same directory as the data itself:\
\
\pard\tx864\pardeftab864\ql\qnatural\pardirnatural

\f1\fs26 \cf0 \CocoaLigature0     BNRStore *store = ...    \
    NSError *err;\
    BNRTCIndexManager *indexManager = [[BNRTCIndexManager alloc] initWithPath:@"/tmp/foo"\
                                                                        error:&err];\
    [store setIndexManager:indexManager];\
    [indexManager release];\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\fs28 \cf0 \CocoaLigature1 \
Then the 
\b BNRStoredObject
\b0  subclass identifies which attributes need to be full-text indexed:\
\
\pard\tx864\pardeftab864\ql\qnatural\pardirnatural

\f1\fs26 \cf0 \CocoaLigature0 + (NSSet *)textIndexedAttributes\
\{\
    \cf2 static\cf0  NSSet *textKeys = \cf2 nil\cf0 ;\
    \cf2 if\cf0  (!textKeys) \{\
        textKeys = [[NSSet alloc] initWithObjects:\cf3 @"title"\cf0 , \cf2 nil\cf0 ];\
    \}\
    \cf2 return\cf0  textKeys;\
\}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\fs28 \cf0 \CocoaLigature1 \
Now you can search using Tokyo-Dystopia-style search strings:\
\
\pard\tx864\pardeftab864\ql\qnatural\pardirnatural

\f1\fs26 \cf0 \CocoaLigature0     NSMutableArray *songsThatMatch = [store objectsForClass:[Song class]\
                                              matchingText:\cf3 @"[[*choice*]]"\cf0 \
                                                    forKey:\cf3 @"title"\cf0 ];\
\pard\tx864\pardeftab864\ql\qnatural\pardirnatural

\f0\fs28 \cf0 \CocoaLigature1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural
\cf0 On my system, I can search 1M records and fetch the 727 that match in 0.1 seconds.  The same operation on Core Data takes 1.3 seconds.\

\b\fs36 \
Versioning\

\b0\fs28 \
Over time, the data that you choose to write for an object may change.  That is, in version 1.0, a person has only a phone number.  In version 2.0, you add a fax number.  To support this, there is versioning.   Before you write any instances out, set the version number on the class:\
\

\f1\fs26 \CocoaLigature0 [Song setVersion:2];\

\f0\fs28 \CocoaLigature1 \
When reading in a data buffer, check the 
\f1\fs26 \CocoaLigature0 versionOfData
\f0\fs28 \CocoaLigature1  before trying to read the fax number;\
\
\pard\tx864\pardeftab864\ql\qnatural\pardirnatural

\f1\fs26 \cf0 \CocoaLigature0 - (\cf2 void\cf0 )readContentFromBuffer:(BNRDataBuffer *)d\
\{\
    [phone release];\
    phone = [[d readString] retain];\
    \
    if ([d versionOfData] > 2) \{\
        fax = [[d readString] retain];\
    \}\
\}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\fs28 \cf0 \CocoaLigature1 \
The version is an 8-bit unsigned integer which is stored with the object's data.  (Yes, you get a version number for each instance. Thus, you don't need to upgrade all the objects simultaneously. As they are edited and saved out, they will be automatically upgraded.)\
\
I recognize that at times graceful incremental upgrades may not be possible (rather the entire directed graph of objects must be upgraded), but I wanted to make possible the many cases incremental upgrades are desireable.\
\
(You can disable the per-instance versioning if you must:\
\

\f1\fs26 \CocoaLigature0 [store setUsesPerInstanceVersioning:NO];\

\f0\fs28 \CocoaLigature1 \
This is provided primarily for backwards compatibility with apps that started using this framework before I added per-instance-versioning.)\
\

\b\fs36 The size of things\

\b0\fs28 \
The database files are not small.  Nor are the full-text indexes.  For the million-song database, the Tokyo Cabinet data file is more than twice as large as the Core Data file.  And that doesn't include the index which is that also about twice as large as the Core Data file.\
\

\b\fs36 Getting it on the phone\

\b0\fs28 \
The first problem is that you need to compile TokyoCabinet/TokyoDystopia for arm.  I tried every configure trick I could come up with and then just created an Xcode static library project and dumped the source to both libraries into the project.  This project is in the repository.\
\
When you link to the resulting static library, you will also need to link in libz, which is part of the iPhone SDK\
\

\b\fs36 License\

\b0\fs28 \
My code is under the MIT license and Tokyo Cabinet is under the LGPL.   I think this will enable you to use it how you want to use it.  If something bad happens because of the code, you can't sue us.  And if you make changes to Tokyo Cabinet, I think you need to submit those changes to the author. \
\
There has been some concern over the fact that Tokyo Cabinet and Tokyo Dystopia are under the LGPL.  I wrote to Mikio Hirabayashi, the author of Tokyo Cabinet and Tokyo Dystopia.  He made it very clear that he was fine with both libraries being used in commercial products.\
\

\b\fs36 To Do:\

\b0\fs28 \
I recognize that there is room for improvement here:\
\
0) The BNRDataBuffer should know how to write many more types of data\
1) The creation of a model-file architecture\
3) Use B+ trees to make attributes indexable and add support for NSPredicate\
4) Better automatic undo support \
5) Automatic syncing to the cloud\
6) Easy hooks for QuickLook images and Spotlight metadata in 
\b BNRStoreDocument
\b0 \
7) Hook it up to Tokyo Tyrant for non-local storage}